
Music_Spectrum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ab0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008808  08001c78  08001c78  00011c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a480  0800a480  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a480  0800a480  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a480  0800a480  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a480  0800a480  0001a480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  20000074  0800a4fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ca4  0800a4fc  00020ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000749e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001319  00000000  00000000  00027542  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000360  00000000  00000000  00028860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000340  00000000  00000000  00028bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000322b  00000000  00000000  00028f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000226b  00000000  00000000  0002c12b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000eb  00000000  00000000  0002e396  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000bdc  00000000  00000000  0002e484  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00003289  00000000  00000000  0002f060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001c60 	.word	0x08001c60

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	08001c60 	.word	0x08001c60

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <adcinit>:

/*
 * Initialize ADC for sampling audio signal from Audio Sesor
 * Analog_Pin = PA0
 */
void adcinit(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af02      	add	r7, sp, #8

	GPIO_Config(GPIOA, Analog_Pin, Analog_Mode, No, AF0);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2203      	movs	r2, #3
 8000a92:	2100      	movs	r1, #0
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <adcinit+0x3c>)
 8000a96:	f000 fa0a 	bl	8000eae <GPIO_Config>
	RCC_APB2_CLKEN(RCC_APB2Peri_ADC1);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <adcinit+0x40>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <adcinit+0x40>)
 8000aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
	ADC_FirstConversion(ADC1, ADC_CHANNEL0);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <adcinit+0x44>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
	ADC_Start(ADC1);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <adcinit+0x44>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <adcinit+0x44>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6093      	str	r3, [r2, #8]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40012000 	.word	0x40012000

08000acc <gpioinit>:
 * Inizialize the GPIO pins
 * SCK_PIN : PA5 (SPI clock)
 * MOSI_PIN : PA7 (SPI dataout)
 * CS_PIN : PB5
 */
void gpioinit(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af02      	add	r7, sp, #8

	RCC_AHB1_CLKEN(RCC_AHB1Peri_GPIOA);
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <gpioinit+0x54>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <gpioinit+0x54>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_AHB1_CLKEN(RCC_AHB1Peri_GPIOB);
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <gpioinit+0x54>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <gpioinit+0x54>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30

	GPIO_Config(GPIOA, SCK_PIN, Alternate_Mode, No, AF_SPI);   //SCK PIN
 8000aea:	2305      	movs	r3, #5
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	2202      	movs	r2, #2
 8000af2:	2105      	movs	r1, #5
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <gpioinit+0x58>)
 8000af6:	f000 f9da 	bl	8000eae <GPIO_Config>
	GPIO_Config(GPIOA, MOSI_PIN, Alternate_Mode, No, AF_SPI);  //MOSI PIN
 8000afa:	2305      	movs	r3, #5
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2300      	movs	r3, #0
 8000b00:	2202      	movs	r2, #2
 8000b02:	2107      	movs	r1, #7
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <gpioinit+0x58>)
 8000b06:	f000 f9d2 	bl	8000eae <GPIO_Config>
	GPIO_Config(GPIOB, CS_PIN, Output_Mode, Pull_Down, AF0);   //CS   PIN
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2302      	movs	r3, #2
 8000b10:	2201      	movs	r2, #1
 8000b12:	2105      	movs	r1, #5
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <gpioinit+0x5c>)
 8000b16:	f000 f9ca 	bl	8000eae <GPIO_Config>
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400

08000b2c <spiinit>:

/*
 * Initialize the SPI1
 */
void spiinit(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af04      	add	r7, sp, #16

	RCC_APB2_CLKEN(RCC_APB2Peri_SPI1);
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <spiinit+0x38>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <spiinit+0x38>)
 8000b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44

	SPI_Config(SPI1, SPI_BaudRate_sysclkby16, SPI_BIDIMode_2Line, SPI_First_MSB,
 8000b3e:	2301      	movs	r3, #1
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	2301      	movs	r3, #1
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	2301      	movs	r3, #1
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2103      	movs	r1, #3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <spiinit+0x3c>)
 8000b52:	f000 fa12 	bl	8000f7a <SPI_Config>
			SPI_DataFrame_16Bit, SPI_Master, SPI_Trasnmit);
	SPI_Enable(SPI1);
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <spiinit+0x3c>)
 8000b58:	f000 fa3a 	bl	8000fd0 <SPI_Enable>
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40013000 	.word	0x40013000
 8000b6c:	00000000 	.word	0x00000000

08000b70 <main>:

/*
 * Main functions begins
 */
int main(void) {
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0

	gpioinit();
 8000b76:	f7ff ffa9 	bl	8000acc <gpioinit>
	spiinit();
 8000b7a:	f7ff ffd7 	bl	8000b2c <spiinit>
	adcinit();
 8000b7e:	f7ff ff81 	bl	8000a84 <adcinit>
	uint8_t map;

	while (1) {

		//Sampling 256 ADC data and store in array Input[i]
		for (uint16_t i = 0; i < Samples; i += 2) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	83fb      	strh	r3, [r7, #30]
 8000b86:	e026      	b.n	8000bd6 <main+0x66>

			delay1();
 8000b88:	f000 f886 	bl	8000c98 <delay1>
			ADC_StartConv(ADC1);
 8000b8c:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <main+0x110>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <main+0x110>)
 8000b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b96:	6093      	str	r3, [r2, #8]
			ADC_Done(ADC1);
 8000b98:	4839      	ldr	r0, [pc, #228]	; (8000c80 <main+0x110>)
 8000b9a:	f000 f977 	bl	8000e8c <ADC_Done>
			Input[(uint16_t) i] = (float32_t) ((float32_t) ADC_GetData(ADC1)
 8000b9e:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <main+0x110>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000baa:	8bfb      	ldrh	r3, [r7, #30]
 8000bac:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000c84 <main+0x114>
 8000bb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb4:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <main+0x118>)
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	edc3 7a00 	vstr	s15, [r3]
					- 2200);
			Input[(uint16_t) (i + 1)] = 0;
 8000bbe:	8bfb      	ldrh	r3, [r7, #30]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <main+0x118>)
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < Samples; i += 2) {
 8000bd0:	8bfb      	ldrh	r3, [r7, #30]
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	83fb      	strh	r3, [r7, #30]
 8000bd6:	8bfb      	ldrh	r3, [r7, #30]
 8000bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bdc:	d3d4      	bcc.n	8000b88 <main+0x18>
		}

		//DSP-CFFT
		arm_cfft_radix4_init_f32(&S, FFT_Size, 0, 1);
 8000bde:	4638      	mov	r0, r7
 8000be0:	2301      	movs	r3, #1
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	f000 fa3a 	bl	8001060 <arm_cfft_radix4_init_f32>
		arm_cfft_radix4_f32(&S, Input);
 8000bec:	463b      	mov	r3, r7
 8000bee:	4926      	ldr	r1, [pc, #152]	; (8000c88 <main+0x118>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fe3d 	bl	8001870 <arm_cfft_radix4_f32>

		//stores the magnitude value of each bin in Output array
		arm_cmplx_mag_f32(Input, Output, FFT_Size);
 8000bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bfa:	4924      	ldr	r1, [pc, #144]	; (8000c8c <main+0x11c>)
 8000bfc:	4822      	ldr	r0, [pc, #136]	; (8000c88 <main+0x118>)
 8000bfe:	f000 fe57 	bl	80018b0 <arm_cmplx_mag_f32>

		/*
		 * display the first 8 Low-frequencies in 8x8 Matrix
		 * Map the magnitude value of each frequency to corresponding level
		 */
		for (int y = 0; y < 8; y++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	e029      	b.n	8000c5c <main+0xec>
			map = 0.004 * Output[y + 1] - 0.2;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <main+0x11c>)
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fc5b 	bl	80004d0 <__aeabi_f2d>
 8000c1a:	a315      	add	r3, pc, #84	; (adr r3, 8000c70 <main+0x100>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	f7ff fcae 	bl	8000580 <__aeabi_dmul>
 8000c24:	4603      	mov	r3, r0
 8000c26:	460c      	mov	r4, r1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	a312      	add	r3, pc, #72	; (adr r3, 8000c78 <main+0x108>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff faed 	bl	8000210 <__aeabi_dsub>
 8000c36:	4603      	mov	r3, r0
 8000c38:	460c      	mov	r4, r1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f7ff feb1 	bl	80009a4 <__aeabi_d2uiz>
 8000c42:	4603      	mov	r3, r0
 8000c44:	75fb      	strb	r3, [r7, #23]
			spectrum[y] = (level[map]);
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <main+0x120>)
 8000c4a:	5cd1      	ldrb	r1, [r2, r3]
 8000c4c:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <main+0x124>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4413      	add	r3, r2
 8000c52:	460a      	mov	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < 8; y++) {
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2b07      	cmp	r3, #7
 8000c60:	ddd2      	ble.n	8000c08 <main+0x98>
		}

		Draw_Spectrum(spectrum);
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <main+0x124>)
 8000c64:	f000 f8ea 	bl	8000e3c <Draw_Spectrum>
		for (uint16_t i = 0; i < Samples; i += 2) {
 8000c68:	e78b      	b.n	8000b82 <main+0x12>
 8000c6a:	bf00      	nop
 8000c6c:	f3af 8000 	nop.w
 8000c70:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c74:	3f70624d 	.word	0x3f70624d
 8000c78:	9999999a 	.word	0x9999999a
 8000c7c:	3fc99999 	.word	0x3fc99999
 8000c80:	40012000 	.word	0x40012000
 8000c84:	45098000 	.word	0x45098000
 8000c88:	200004a0 	.word	0x200004a0
 8000c8c:	200000a0 	.word	0x200000a0
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000090 	.word	0x20000090

08000c98 <delay1>:

	return 0;
}

//31khz
void delay1(void) {
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	unsigned static volatile long i = 0;
	unsigned static volatile long j = 0;
	for (i = 0; i < 1; i++) {
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <delay1+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e011      	b.n	8000cc8 <delay1+0x30>
		for (j = 0; j < 5;) {
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <delay1+0x48>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	e004      	b.n	8000cb6 <delay1+0x1e>
			j++;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <delay1+0x48>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <delay1+0x48>)
 8000cb4:	6013      	str	r3, [r2, #0]
		for (j = 0; j < 5;) {
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <delay1+0x48>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d9f6      	bls.n	8000cac <delay1+0x14>
	for (i = 0; i < 1; i++) {
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <delay1+0x44>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <delay1+0x44>)
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <delay1+0x44>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0e9      	beq.n	8000ca4 <delay1+0xc>
		}
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000098 	.word	0x20000098
 8000ce0:	2000009c 	.word	0x2000009c

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f842 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x28>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x28>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x28>)
 8000d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d72:	e003      	b.n	8000d7c <LoopCopyDataInit>

08000d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7a:	3104      	adds	r1, #4

08000d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d84:	d3f6      	bcc.n	8000d74 <CopyDataInit>
  ldr  r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d88:	e002      	b.n	8000d90 <LoopFillZerobss>

08000d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d8c:	f842 3b04 	str.w	r3, [r2], #4

08000d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d94:	d3f9      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd3 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f000 fee7 	bl	8001b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fee7 	bl	8000b70 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000da8:	0800a488 	.word	0x0800a488
  ldr  r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000db4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000db8:	20000ca4 	.word	0x20000ca4

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000009 	.word	0x20000009
 8000de4:	20000ca0 	.word	0x20000ca0

08000de8 <Set_Register>:
#include <sp_led_matrix.h>



void Set_Register(int addr, char data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
    		    SPI_TxBufferEmpty(SPI1);
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <Set_Register+0x4c>)
 8000df6:	f000 f8fb 	bl	8000ff0 <SPI_TxBufferEmpty>
				GPIO_Write(GPIOB,5,LOW);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <Set_Register+0x50>)
 8000e00:	f000 f897 	bl	8000f32 <GPIO_Write>
				//SPI1->DR = addr<<(8) | data;
				SPI_Senddata(SPI1, addr<<(8)| data);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	4807      	ldr	r0, [pc, #28]	; (8000e34 <Set_Register+0x4c>)
 8000e18:	f000 f912 	bl	8001040 <SPI_Senddata>
				SPI_NotBusy(SPI1);
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <Set_Register+0x4c>)
 8000e1e:	f000 f8fb 	bl	8001018 <SPI_NotBusy>
				GPIO_Write(GPIOB,5,HIGH);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2105      	movs	r1, #5
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <Set_Register+0x50>)
 8000e28:	f000 f883 	bl	8000f32 <GPIO_Write>

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40013000 	.word	0x40013000
 8000e38:	40020400 	.word	0x40020400

08000e3c <Draw_Spectrum>:




void Draw_Spectrum(char *data1){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
      
				Set_Register(MAX7219_SHUTDOWN_REG,0x0);
 8000e44:	2100      	movs	r1, #0
 8000e46:	200c      	movs	r0, #12
 8000e48:	f7ff ffce 	bl	8000de8 <Set_Register>
				Set_Register(MAX7219_SCANLIMIT_REG,7);
 8000e4c:	2107      	movs	r1, #7
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f7ff ffca 	bl	8000de8 <Set_Register>
		
				for(int i=7;i>=0;i--)
 8000e54:	2307      	movs	r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e00d      	b.n	8000e76 <Draw_Spectrum+0x3a>
				{
				    //Set_Register(MAX7219_DIGIT_REG(i),(*data1));
						Set_Register(MAX7219_DIGIT_REG(i),*data1);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4610      	mov	r0, r2
 8000e66:	f7ff ffbf 	bl	8000de8 <Set_Register>
						data1++;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
				for(int i=7;i>=0;i--)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	daee      	bge.n	8000e5a <Draw_Spectrum+0x1e>
				}
	
				Set_Register(MAX7219_SHUTDOWN_REG,0x1);
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	200c      	movs	r0, #12
 8000e80:	f7ff ffb2 	bl	8000de8 <Set_Register>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <ADC_Done>:
 */


#include "sp_stm32_adc.h"

void ADC_Done(ADC_TypeDef *ADCx){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	while(!(ADCx->SR & 1 << (1)));
 8000e94:	bf00      	nop
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f9      	beq.n	8000e96 <ADC_Done+0xa>
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <GPIO_Config>:
void RESET_GPIO(GPIO_TypeDef  *GPIOx){
	GPIOx->MODER = 0x00;
}

void GPIO_Config(GPIO_TypeDef  *GPIOx,int pinnum,GPIO_ModeTypeDef mode,GPIO_PUPDTypeDef pupd,GPIO_AFTypeDef alternatefunction)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	461a      	mov	r2, r3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71bb      	strb	r3, [r7, #6]
        GPIOx->MODER |= mode<<(2*pinnum);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	79f9      	ldrb	r1, [r7, #7]
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	0052      	lsls	r2, r2, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	601a      	str	r2, [r3, #0]
		GPIOx->PUPDR |= pupd<<(2*pinnum);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	79b9      	ldrb	r1, [r7, #6]
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	60da      	str	r2, [r3, #12]
		
		if(mode == Alternate_Mode)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d119      	bne.n	8000f26 <GPIO_Config+0x78>
		{
        GPIOx->AFR[pinnum>>3] |= alternatefunction<<((pinnum%8)*4);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	10da      	asrs	r2, r3, #3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000efe:	7e3a      	ldrb	r2, [r7, #24]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4258      	negs	r0, r3
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	f000 0007 	and.w	r0, r0, #7
 8000f0c:	bf58      	it	pl
 8000f0e:	4243      	negpl	r3, r0
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	10da      	asrs	r2, r3, #3
 8000f1c:	4301      	orrs	r1, r0
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3208      	adds	r2, #8
 8000f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		
		}
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <GPIO_Write>:



void GPIO_Write(GPIO_TypeDef  *GPIOx,int pinnum,uint16_t  state)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80fb      	strh	r3, [r7, #6]
    if(state == 1)
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d109      	bne.n	8000f5a <GPIO_Write+0x28>
		{
		    GPIOx->ODR |= 1<<(pinnum);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	431a      	orrs	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	615a      	str	r2, [r3, #20]
		}
		else
		{
		    GPIOx->ODR &= ~(1<<(pinnum));
		}
}
 8000f58:	e009      	b.n	8000f6e <GPIO_Write+0x3c>
		    GPIOx->ODR &= ~(1<<(pinnum));
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	401a      	ands	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	615a      	str	r2, [r3, #20]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <SPI_Config>:


void SPI_Config(SPI_TypeDef *spix, SPI_BaudRateTypeDef baudratepslcr,
		SPI_BIDIModeTypeDef bidimode, SPI_FirstTypeDef firstmsblsb,
		SPI_DataFrameTypeDef dataframe, SPI_MasterTypeDef masterslave,
		SPI_BIDIOETypeDef receivetransmit) {
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70bb      	strb	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]

	spix->CR1 |= baudratepslcr << (3) | firstmsblsb << (7) | dataframe << (11)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	00d1      	lsls	r1, r2, #3
 8000f9c:	787a      	ldrb	r2, [r7, #1]
 8000f9e:	01d2      	lsls	r2, r2, #7
 8000fa0:	4311      	orrs	r1, r2
 8000fa2:	7c3a      	ldrb	r2, [r7, #16]
 8000fa4:	02d2      	lsls	r2, r2, #11
 8000fa6:	4311      	orrs	r1, r2
			| bidimode << (15) | masterslave << (2) | receivetransmit << (14)
 8000fa8:	78ba      	ldrb	r2, [r7, #2]
 8000faa:	03d2      	lsls	r2, r2, #15
 8000fac:	4311      	orrs	r1, r2
 8000fae:	7d3a      	ldrb	r2, [r7, #20]
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4311      	orrs	r1, r2
 8000fb4:	7e3a      	ldrb	r2, [r7, #24]
 8000fb6:	0392      	lsls	r2, r2, #14
 8000fb8:	430a      	orrs	r2, r1
	spix->CR1 |= baudratepslcr << (3) | firstmsblsb << (7) | dataframe << (11)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
			| 1 << (8) | 1 << (9);
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SPI_Enable>:

void SPI_Enable(SPI_TypeDef *spix) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	spix->CR1 |= 1 << (6);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	601a      	str	r2, [r3, #0]

}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SPI_TxBufferEmpty>:

void SPI_TxBufferEmpty(SPI_TypeDef *spix) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	while (!(SPI1->SR & 1 << (1)))
 8000ff8:	bf00      	nop
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SPI_TxBufferEmpty+0x24>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f9      	beq.n	8000ffa <SPI_TxBufferEmpty+0xa>
		;

}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40013000 	.word	0x40013000

08001018 <SPI_NotBusy>:

void SPI_NotBusy(SPI_TypeDef *spix) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	while ((SPI1->SR & 1 << (7)))
 8001020:	bf00      	nop
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <SPI_NotBusy+0x24>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f9      	bne.n	8001022 <SPI_NotBusy+0xa>
		;

}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40013000 	.word	0x40013000

08001040 <SPI_Senddata>:

void SPI_Senddata(SPI_TypeDef *spix, uint16_t data) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
	spix->DR = data;
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60da      	str	r2, [r3, #12]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <arm_cfft_radix4_init_f32>:
 8001060:	b410      	push	{r4}
 8001062:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001066:	4c2b      	ldr	r4, [pc, #172]	; (8001114 <arm_cfft_radix4_init_f32+0xb4>)
 8001068:	7082      	strb	r2, [r0, #2]
 800106a:	70c3      	strb	r3, [r0, #3]
 800106c:	8001      	strh	r1, [r0, #0]
 800106e:	6044      	str	r4, [r0, #4]
 8001070:	d043      	beq.n	80010fa <arm_cfft_radix4_init_f32+0x9a>
 8001072:	d80f      	bhi.n	8001094 <arm_cfft_radix4_init_f32+0x34>
 8001074:	2910      	cmp	r1, #16
 8001076:	d032      	beq.n	80010de <arm_cfft_radix4_init_f32+0x7e>
 8001078:	2940      	cmp	r1, #64	; 0x40
 800107a:	d11e      	bne.n	80010ba <arm_cfft_radix4_init_f32+0x5a>
 800107c:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <arm_cfft_radix4_init_f32+0xb8>)
 8001082:	8181      	strh	r1, [r0, #12]
 8001084:	81c1      	strh	r1, [r0, #14]
 8001086:	6102      	str	r2, [r0, #16]
 8001088:	6083      	str	r3, [r0, #8]
 800108a:	2000      	movs	r0, #0
 800108c:	b240      	sxtb	r0, r0
 800108e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001098:	d014      	beq.n	80010c4 <arm_cfft_radix4_init_f32+0x64>
 800109a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800109e:	d10c      	bne.n	80010ba <arm_cfft_radix4_init_f32+0x5a>
 80010a0:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80010a4:	6103      	str	r3, [r0, #16]
 80010a6:	4a1d      	ldr	r2, [pc, #116]	; (800111c <arm_cfft_radix4_init_f32+0xbc>)
 80010a8:	6082      	str	r2, [r0, #8]
 80010aa:	2301      	movs	r3, #1
 80010ac:	8183      	strh	r3, [r0, #12]
 80010ae:	81c3      	strh	r3, [r0, #14]
 80010b0:	2000      	movs	r0, #0
 80010b2:	b240      	sxtb	r0, r0
 80010b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	20ff      	movs	r0, #255	; 0xff
 80010bc:	b240      	sxtb	r0, r0
 80010be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 80010c8:	6103      	str	r3, [r0, #16]
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <arm_cfft_radix4_init_f32+0xc0>)
 80010cc:	6082      	str	r2, [r0, #8]
 80010ce:	2304      	movs	r3, #4
 80010d0:	8183      	strh	r3, [r0, #12]
 80010d2:	81c3      	strh	r3, [r0, #14]
 80010d4:	2000      	movs	r0, #0
 80010d6:	b240      	sxtb	r0, r0
 80010d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 80010e2:	6103      	str	r3, [r0, #16]
 80010e4:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <arm_cfft_radix4_init_f32+0xc4>)
 80010e6:	6082      	str	r2, [r0, #8]
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	8183      	strh	r3, [r0, #12]
 80010ee:	81c3      	strh	r3, [r0, #14]
 80010f0:	2000      	movs	r0, #0
 80010f2:	b240      	sxtb	r0, r0
 80010f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 80010fe:	6103      	str	r3, [r0, #16]
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <arm_cfft_radix4_init_f32+0xc8>)
 8001102:	6082      	str	r2, [r0, #8]
 8001104:	2310      	movs	r3, #16
 8001106:	8183      	strh	r3, [r0, #12]
 8001108:	81c3      	strh	r3, [r0, #14]
 800110a:	2000      	movs	r0, #0
 800110c:	b240      	sxtb	r0, r0
 800110e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	08002478 	.word	0x08002478
 8001118:	08001cf6 	.word	0x08001cf6
 800111c:	08001c78 	.word	0x08001c78
 8001120:	08001c7e 	.word	0x08001c7e
 8001124:	08001e76 	.word	0x08001e76
 8001128:	08001c96 	.word	0x08001c96

0800112c <arm_radix4_butterfly_f32>:
 800112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001130:	ed2d 8b06 	vpush	{d8-d10}
 8001134:	468a      	mov	sl, r1
 8001136:	0889      	lsrs	r1, r1, #2
 8001138:	b08d      	sub	sp, #52	; 0x34
 800113a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800113e:	eb00 040c 	add.w	r4, r0, ip
 8001142:	460d      	mov	r5, r1
 8001144:	461f      	mov	r7, r3
 8001146:	4691      	mov	r9, r2
 8001148:	920a      	str	r2, [sp, #40]	; 0x28
 800114a:	eb04 020c 	add.w	r2, r4, ip
 800114e:	4606      	mov	r6, r0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8001156:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800115a:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 800115e:	9009      	str	r0, [sp, #36]	; 0x24
 8001160:	f10c 0004 	add.w	r0, ip, #4
 8001164:	9701      	str	r7, [sp, #4]
 8001166:	9103      	str	r1, [sp, #12]
 8001168:	4430      	add	r0, r6
 800116a:	4631      	mov	r1, r6
 800116c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001170:	1d37      	adds	r7, r6, #4
 8001172:	9e00      	ldr	r6, [sp, #0]
 8001174:	46ab      	mov	fp, r5
 8001176:	00f5      	lsls	r5, r6, #3
 8001178:	9502      	str	r5, [sp, #8]
 800117a:	f8cd b010 	str.w	fp, [sp, #16]
 800117e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001182:	f8cd a008 	str.w	sl, [sp, #8]
 8001186:	f8dd a004 	ldr.w	sl, [sp, #4]
 800118a:	ea4f 1806 	mov.w	r8, r6, lsl #4
 800118e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8001192:	464e      	mov	r6, r9
 8001194:	464d      	mov	r5, r9
 8001196:	edd1 4a01 	vldr	s9, [r1, #4]
 800119a:	ed10 4a01 	vldr	s8, [r0, #-4]
 800119e:	ed17 6a01 	vldr	s12, [r7, #-4]
 80011a2:	edd2 6a00 	vldr	s13, [r2]
 80011a6:	ed94 7a01 	vldr	s14, [r4, #4]
 80011aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ae:	ed93 5a00 	vldr	s10, [r3]
 80011b2:	edd2 5a01 	vldr	s11, [r2, #4]
 80011b6:	ed99 3a00 	vldr	s6, [r9]
 80011ba:	edd9 3a01 	vldr	s7, [r9, #4]
 80011be:	ee36 2a26 	vadd.f32	s4, s12, s13
 80011c2:	ee74 2a05 	vadd.f32	s5, s8, s10
 80011c6:	ee34 1aa5 	vadd.f32	s2, s9, s11
 80011ca:	ee77 1a27 	vadd.f32	s3, s14, s15
 80011ce:	ee32 0a22 	vadd.f32	s0, s4, s5
 80011d2:	ee71 0a21 	vadd.f32	s1, s2, s3
 80011d6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80011da:	ee34 5a45 	vsub.f32	s10, s8, s10
 80011de:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80011e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e6:	ed07 0a01 	vstr	s0, [r7, #-4]
 80011ea:	edc1 0a01 	vstr	s1, [r1, #4]
 80011ee:	ed95 4a00 	vldr	s8, [r5]
 80011f2:	edd6 6a00 	vldr	s13, [r6]
 80011f6:	edd6 7a01 	vldr	s15, [r6, #4]
 80011fa:	ee72 4a62 	vsub.f32	s9, s4, s5
 80011fe:	ee71 1a61 	vsub.f32	s3, s2, s3
 8001202:	ee75 2ac5 	vsub.f32	s5, s11, s10
 8001206:	ed95 1a01 	vldr	s2, [r5, #4]
 800120a:	ee36 2a07 	vadd.f32	s4, s12, s14
 800120e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8001212:	ee35 6a25 	vadd.f32	s12, s10, s11
 8001216:	ee62 0a04 	vmul.f32	s1, s4, s8
 800121a:	ee21 5a83 	vmul.f32	s10, s3, s6
 800121e:	ee22 2a01 	vmul.f32	s4, s4, s2
 8001222:	ee22 4a84 	vmul.f32	s8, s5, s8
 8001226:	ee22 1a81 	vmul.f32	s2, s5, s2
 800122a:	ee67 5a26 	vmul.f32	s11, s14, s13
 800122e:	ee64 2a83 	vmul.f32	s5, s9, s6
 8001232:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001236:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800123a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800123e:	ee61 1aa3 	vmul.f32	s3, s3, s7
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	ee30 3a81 	vadd.f32	s6, s1, s2
 800124a:	ee34 4a42 	vsub.f32	s8, s8, s4
 800124e:	ee72 3aa1 	vadd.f32	s7, s5, s3
 8001252:	ee35 5a64 	vsub.f32	s10, s10, s9
 8001256:	ee35 7a86 	vadd.f32	s14, s11, s12
 800125a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800125e:	3108      	adds	r1, #8
 8001260:	4551      	cmp	r1, sl
 8001262:	ed40 3a01 	vstr	s7, [r0, #-4]
 8001266:	f107 0708 	add.w	r7, r7, #8
 800126a:	ed84 5a01 	vstr	s10, [r4, #4]
 800126e:	44c1      	add	r9, r8
 8001270:	ed82 3a00 	vstr	s6, [r2]
 8001274:	ed82 4a01 	vstr	s8, [r2, #4]
 8001278:	445d      	add	r5, fp
 800127a:	ed83 7a00 	vstr	s14, [r3]
 800127e:	edc3 7a01 	vstr	s15, [r3, #4]
 8001282:	4476      	add	r6, lr
 8001284:	f100 0008 	add.w	r0, r0, #8
 8001288:	f104 0408 	add.w	r4, r4, #8
 800128c:	f102 0208 	add.w	r2, r2, #8
 8001290:	f103 0308 	add.w	r3, r3, #8
 8001294:	f47f af7f 	bne.w	8001196 <arm_radix4_butterfly_f32+0x6a>
 8001298:	9b00      	ldr	r3, [sp, #0]
 800129a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800129e:	f8dd b010 	ldr.w	fp, [sp, #16]
 80012a2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80012a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	2a04      	cmp	r2, #4
 80012ae:	9306      	str	r3, [sp, #24]
 80012b0:	f240 80b9 	bls.w	8001426 <arm_radix4_butterfly_f32+0x2fa>
 80012b4:	9207      	str	r2, [sp, #28]
 80012b6:	9806      	ldr	r0, [sp, #24]
 80012b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80012ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80012bc:	ea4f 039b 	mov.w	r3, fp, lsr #2
 80012c0:	4619      	mov	r1, r3
 80012c2:	9308      	str	r3, [sp, #32]
 80012c4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80012c8:	1e4a      	subs	r2, r1, #1
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	9205      	str	r2, [sp, #20]
 80012ce:	9303      	str	r3, [sp, #12]
 80012d0:	010a      	lsls	r2, r1, #4
 80012d2:	0103      	lsls	r3, r0, #4
 80012d4:	9204      	str	r2, [sp, #16]
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	00c2      	lsls	r2, r0, #3
 80012da:	2300      	movs	r3, #0
 80012dc:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	46b8      	mov	r8, r7
 80012e4:	46be      	mov	lr, r7
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	9b04      	ldr	r3, [sp, #16]
 80012ea:	ed97 1a00 	vldr	s2, [r7]
 80012ee:	edd7 1a01 	vldr	s3, [r7, #4]
 80012f2:	ed9e 2a00 	vldr	s4, [lr]
 80012f6:	edde 2a01 	vldr	s5, [lr, #4]
 80012fa:	ed98 3a00 	vldr	s6, [r8]
 80012fe:	edd8 3a01 	vldr	s7, [r8, #4]
 8001302:	9d00      	ldr	r5, [sp, #0]
 8001304:	18f1      	adds	r1, r6, r3
 8001306:	eb09 0203 	add.w	r2, r9, r3
 800130a:	1d34      	adds	r4, r6, #4
 800130c:	464b      	mov	r3, r9
 800130e:	4630      	mov	r0, r6
 8001310:	ed90 4a01 	vldr	s8, [r0, #4]
 8001314:	ed54 5a01 	vldr	s11, [r4, #-4]
 8001318:	ed91 7a00 	vldr	s14, [r1]
 800131c:	edd2 7a00 	vldr	s15, [r2]
 8001320:	edd3 4a01 	vldr	s9, [r3, #4]
 8001324:	ed92 5a01 	vldr	s10, [r2, #4]
 8001328:	ed93 6a00 	vldr	s12, [r3]
 800132c:	edd1 6a01 	vldr	s13, [r1, #4]
 8001330:	ee35 0a87 	vadd.f32	s0, s11, s14
 8001334:	ee34 8a26 	vadd.f32	s16, s8, s13
 8001338:	ee76 8a27 	vadd.f32	s17, s12, s15
 800133c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8001340:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001344:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8001348:	ee74 7ac5 	vsub.f32	s15, s9, s10
 800134c:	ee74 0a85 	vadd.f32	s1, s9, s10
 8001350:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8001354:	ee78 4a60 	vsub.f32	s9, s16, s1
 8001358:	ee35 5aa7 	vadd.f32	s10, s11, s15
 800135c:	ee30 4a68 	vsub.f32	s8, s0, s17
 8001360:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8001364:	ee76 7a26 	vadd.f32	s15, s12, s13
 8001368:	ee64 aa02 	vmul.f32	s21, s8, s4
 800136c:	ee24 aaa2 	vmul.f32	s20, s9, s5
 8001370:	ee24 4a22 	vmul.f32	s8, s8, s5
 8001374:	ee65 9a01 	vmul.f32	s19, s10, s2
 8001378:	ee25 9aa1 	vmul.f32	s18, s11, s3
 800137c:	ee27 6a03 	vmul.f32	s12, s14, s6
 8001380:	ee67 6aa3 	vmul.f32	s13, s15, s7
 8001384:	ee64 4a82 	vmul.f32	s9, s9, s4
 8001388:	ee25 5a21 	vmul.f32	s10, s10, s3
 800138c:	ee65 5a81 	vmul.f32	s11, s11, s2
 8001390:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001394:	ee67 7a83 	vmul.f32	s15, s15, s6
 8001398:	ee78 0a20 	vadd.f32	s1, s16, s1
 800139c:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80013a0:	ee30 0a28 	vadd.f32	s0, s0, s17
 80013a4:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 80013a8:	ee39 4a89 	vadd.f32	s8, s19, s18
 80013ac:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80013b0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80013b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b8:	445d      	add	r5, fp
 80013ba:	45aa      	cmp	sl, r5
 80013bc:	ed04 0a01 	vstr	s0, [r4, #-4]
 80013c0:	edc0 0a01 	vstr	s1, [r0, #4]
 80013c4:	4464      	add	r4, ip
 80013c6:	ed83 8a00 	vstr	s16, [r3]
 80013ca:	edc3 4a01 	vstr	s9, [r3, #4]
 80013ce:	4460      	add	r0, ip
 80013d0:	ed81 4a00 	vstr	s8, [r1]
 80013d4:	edc1 5a01 	vstr	s11, [r1, #4]
 80013d8:	4463      	add	r3, ip
 80013da:	edc2 6a00 	vstr	s13, [r2]
 80013de:	edc2 7a01 	vstr	s15, [r2, #4]
 80013e2:	4461      	add	r1, ip
 80013e4:	4462      	add	r2, ip
 80013e6:	d893      	bhi.n	8001310 <arm_radix4_butterfly_f32+0x1e4>
 80013e8:	9a01      	ldr	r2, [sp, #4]
 80013ea:	9b00      	ldr	r3, [sp, #0]
 80013ec:	4417      	add	r7, r2
 80013ee:	9a02      	ldr	r2, [sp, #8]
 80013f0:	4496      	add	lr, r2
 80013f2:	9a03      	ldr	r2, [sp, #12]
 80013f4:	4490      	add	r8, r2
 80013f6:	9a05      	ldr	r2, [sp, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4293      	cmp	r3, r2
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	f106 0608 	add.w	r6, r6, #8
 8001402:	f109 0908 	add.w	r9, r9, #8
 8001406:	f67f af6f 	bls.w	80012e8 <arm_radix4_butterfly_f32+0x1bc>
 800140a:	9b06      	ldr	r3, [sp, #24]
 800140c:	9a07      	ldr	r2, [sp, #28]
 800140e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8001412:	0892      	lsrs	r2, r2, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	b29b      	uxth	r3, r3
 8001418:	2a04      	cmp	r2, #4
 800141a:	9207      	str	r2, [sp, #28]
 800141c:	9306      	str	r3, [sp, #24]
 800141e:	d902      	bls.n	8001426 <arm_radix4_butterfly_f32+0x2fa>
 8001420:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8001424:	e747      	b.n	80012b6 <arm_radix4_butterfly_f32+0x18a>
 8001426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800142a:	3320      	adds	r3, #32
 800142c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8001430:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 8001434:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 8001438:	ed53 5a01 	vldr	s11, [r3, #-4]
 800143c:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 8001440:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 8001444:	ed13 7a02 	vldr	s14, [r3, #-8]
 8001448:	ed53 7a03 	vldr	s15, [r3, #-12]
 800144c:	ee34 3a24 	vadd.f32	s6, s8, s9
 8001450:	ee76 3a07 	vadd.f32	s7, s12, s14
 8001454:	ee34 4a64 	vsub.f32	s8, s8, s9
 8001458:	ee36 7a47 	vsub.f32	s14, s12, s14
 800145c:	ee75 4a65 	vsub.f32	s9, s10, s11
 8001460:	ee35 6a25 	vadd.f32	s12, s10, s11
 8001464:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8001468:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800146c:	ee73 2a23 	vadd.f32	s5, s6, s7
 8001470:	ee35 5a86 	vadd.f32	s10, s11, s12
 8001474:	ee73 3a63 	vsub.f32	s7, s6, s7
 8001478:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800147c:	ee34 3a24 	vadd.f32	s6, s8, s9
 8001480:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8001484:	ee74 4a64 	vsub.f32	s9, s8, s9
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	3a01      	subs	r2, #1
 800148e:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 8001492:	ed43 3a06 	vstr	s7, [r3, #-24]	; 0xffffffe8
 8001496:	ed03 3a04 	vstr	s6, [r3, #-16]
 800149a:	ed43 4a02 	vstr	s9, [r3, #-8]
 800149e:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
 80014a2:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 80014a6:	ed43 6a03 	vstr	s13, [r3, #-12]
 80014aa:	ed43 7a01 	vstr	s15, [r3, #-4]
 80014ae:	f103 0320 	add.w	r3, r3, #32
 80014b2:	d1bb      	bne.n	800142c <arm_radix4_butterfly_f32+0x300>
 80014b4:	b00d      	add	sp, #52	; 0x34
 80014b6:	ecbd 8b06 	vpop	{d8-d10}
 80014ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014be:	bf00      	nop

080014c0 <arm_radix4_butterfly_inverse_f32>:
 80014c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c4:	ed2d 8b08 	vpush	{d8-d11}
 80014c8:	b08d      	sub	sp, #52	; 0x34
 80014ca:	468a      	mov	sl, r1
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	0889      	lsrs	r1, r1, #2
 80014d0:	9c00      	ldr	r4, [sp, #0]
 80014d2:	9103      	str	r1, [sp, #12]
 80014d4:	460d      	mov	r5, r1
 80014d6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80014da:	461f      	mov	r7, r3
 80014dc:	46ab      	mov	fp, r5
 80014de:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 80014e2:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 80014e6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80014ea:	0125      	lsls	r5, r4, #4
 80014ec:	00e4      	lsls	r4, r4, #3
 80014ee:	9402      	str	r4, [sp, #8]
 80014f0:	9501      	str	r5, [sp, #4]
 80014f2:	4606      	mov	r6, r0
 80014f4:	4691      	mov	r9, r2
 80014f6:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 80014fa:	9009      	str	r0, [sp, #36]	; 0x24
 80014fc:	f8cd b010 	str.w	fp, [sp, #16]
 8001500:	f10c 0004 	add.w	r0, ip, #4
 8001504:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001508:	f8cd a008 	str.w	sl, [sp, #8]
 800150c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8001510:	920a      	str	r2, [sp, #40]	; 0x28
 8001512:	4430      	add	r0, r6
 8001514:	4632      	mov	r2, r6
 8001516:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800151a:	4647      	mov	r7, r8
 800151c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8001520:	3604      	adds	r6, #4
 8001522:	464d      	mov	r5, r9
 8001524:	464c      	mov	r4, r9
 8001526:	edd2 4a01 	vldr	s9, [r2, #4]
 800152a:	ed10 4a01 	vldr	s8, [r0, #-4]
 800152e:	ed16 6a01 	vldr	s12, [r6, #-4]
 8001532:	edd1 6a00 	vldr	s13, [r1]
 8001536:	ed97 7a01 	vldr	s14, [r7, #4]
 800153a:	edd3 7a01 	vldr	s15, [r3, #4]
 800153e:	edd3 5a00 	vldr	s11, [r3]
 8001542:	ed91 5a01 	vldr	s10, [r1, #4]
 8001546:	ed99 3a00 	vldr	s6, [r9]
 800154a:	edd9 3a01 	vldr	s7, [r9, #4]
 800154e:	ee36 2a26 	vadd.f32	s4, s12, s13
 8001552:	ee74 2a25 	vadd.f32	s5, s8, s11
 8001556:	ee34 1a85 	vadd.f32	s2, s9, s10
 800155a:	ee77 1a27 	vadd.f32	s3, s14, s15
 800155e:	ee32 8a22 	vadd.f32	s16, s4, s5
 8001562:	ee71 0a21 	vadd.f32	s1, s2, s3
 8001566:	ee36 6a66 	vsub.f32	s12, s12, s13
 800156a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800156e:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8001572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001576:	ed06 8a01 	vstr	s16, [r6, #-4]
 800157a:	edc2 0a01 	vstr	s1, [r2, #4]
 800157e:	ed94 4a00 	vldr	s8, [r4]
 8001582:	edd5 6a00 	vldr	s13, [r5]
 8001586:	edd5 7a01 	vldr	s15, [r5, #4]
 800158a:	ee72 4a62 	vsub.f32	s9, s4, s5
 800158e:	ee71 1a61 	vsub.f32	s3, s2, s3
 8001592:	ee75 2a25 	vadd.f32	s5, s10, s11
 8001596:	ed94 1a01 	vldr	s2, [r4, #4]
 800159a:	ee36 2a47 	vsub.f32	s4, s12, s14
 800159e:	ee36 7a07 	vadd.f32	s14, s12, s14
 80015a2:	ee35 6a65 	vsub.f32	s12, s10, s11
 80015a6:	ee62 0a04 	vmul.f32	s1, s4, s8
 80015aa:	ee21 5a83 	vmul.f32	s10, s3, s6
 80015ae:	ee22 2a01 	vmul.f32	s4, s4, s2
 80015b2:	ee22 4a84 	vmul.f32	s8, s5, s8
 80015b6:	ee22 1a81 	vmul.f32	s2, s5, s2
 80015ba:	ee67 5a26 	vmul.f32	s11, s14, s13
 80015be:	ee64 2a83 	vmul.f32	s5, s9, s6
 80015c2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80015c6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80015ca:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015ce:	ee61 1aa3 	vmul.f32	s3, s3, s7
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	ee30 3ac1 	vsub.f32	s6, s1, s2
 80015da:	ee34 4a02 	vadd.f32	s8, s8, s4
 80015de:	ee72 3ae1 	vsub.f32	s7, s5, s3
 80015e2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80015e6:	ee35 7ac6 	vsub.f32	s14, s11, s12
 80015ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015ee:	3208      	adds	r2, #8
 80015f0:	4542      	cmp	r2, r8
 80015f2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80015f6:	f106 0608 	add.w	r6, r6, #8
 80015fa:	ed87 5a01 	vstr	s10, [r7, #4]
 80015fe:	44d1      	add	r9, sl
 8001600:	ed81 3a00 	vstr	s6, [r1]
 8001604:	ed81 4a01 	vstr	s8, [r1, #4]
 8001608:	445c      	add	r4, fp
 800160a:	ed83 7a00 	vstr	s14, [r3]
 800160e:	edc3 7a01 	vstr	s15, [r3, #4]
 8001612:	4475      	add	r5, lr
 8001614:	f100 0008 	add.w	r0, r0, #8
 8001618:	f107 0708 	add.w	r7, r7, #8
 800161c:	f101 0108 	add.w	r1, r1, #8
 8001620:	f103 0308 	add.w	r3, r3, #8
 8001624:	f47f af7f 	bne.w	8001526 <arm_radix4_butterfly_inverse_f32+0x66>
 8001628:	9b00      	ldr	r3, [sp, #0]
 800162a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800162e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001632:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001636:	920b      	str	r2, [sp, #44]	; 0x2c
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	b29b      	uxth	r3, r3
 800163c:	2a04      	cmp	r2, #4
 800163e:	9306      	str	r3, [sp, #24]
 8001640:	f240 80b9 	bls.w	80017b6 <arm_radix4_butterfly_inverse_f32+0x2f6>
 8001644:	9207      	str	r2, [sp, #28]
 8001646:	9806      	ldr	r0, [sp, #24]
 8001648:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800164a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800164c:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8001650:	4619      	mov	r1, r3
 8001652:	9308      	str	r3, [sp, #32]
 8001654:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001658:	1e4a      	subs	r2, r1, #1
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	9205      	str	r2, [sp, #20]
 800165e:	9303      	str	r3, [sp, #12]
 8001660:	010a      	lsls	r2, r1, #4
 8001662:	0103      	lsls	r3, r0, #4
 8001664:	9204      	str	r2, [sp, #16]
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	00c2      	lsls	r2, r0, #3
 800166a:	2300      	movs	r3, #0
 800166c:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8001670:	9201      	str	r2, [sp, #4]
 8001672:	46b8      	mov	r8, r7
 8001674:	46be      	mov	lr, r7
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	9b04      	ldr	r3, [sp, #16]
 800167a:	ed97 1a00 	vldr	s2, [r7]
 800167e:	edd7 1a01 	vldr	s3, [r7, #4]
 8001682:	ed9e 2a00 	vldr	s4, [lr]
 8001686:	edde 2a01 	vldr	s5, [lr, #4]
 800168a:	ed98 3a00 	vldr	s6, [r8]
 800168e:	edd8 3a01 	vldr	s7, [r8, #4]
 8001692:	9d00      	ldr	r5, [sp, #0]
 8001694:	18f1      	adds	r1, r6, r3
 8001696:	eb09 0203 	add.w	r2, r9, r3
 800169a:	1d34      	adds	r4, r6, #4
 800169c:	464b      	mov	r3, r9
 800169e:	4630      	mov	r0, r6
 80016a0:	ed90 4a01 	vldr	s8, [r0, #4]
 80016a4:	ed14 6a01 	vldr	s12, [r4, #-4]
 80016a8:	ed91 7a00 	vldr	s14, [r1]
 80016ac:	edd2 7a00 	vldr	s15, [r2]
 80016b0:	ed93 5a01 	vldr	s10, [r3, #4]
 80016b4:	edd1 4a01 	vldr	s9, [r1, #4]
 80016b8:	edd2 5a01 	vldr	s11, [r2, #4]
 80016bc:	edd3 6a00 	vldr	s13, [r3]
 80016c0:	ee76 0a07 	vadd.f32	s1, s12, s14
 80016c4:	ee36 8aa7 	vadd.f32	s16, s13, s15
 80016c8:	ee36 6a47 	vsub.f32	s12, s12, s14
 80016cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016d0:	ee74 8a24 	vadd.f32	s17, s8, s9
 80016d4:	ee74 7a64 	vsub.f32	s15, s8, s9
 80016d8:	ee35 7a65 	vsub.f32	s14, s10, s11
 80016dc:	ee35 4a25 	vadd.f32	s8, s10, s11
 80016e0:	ee70 4ac8 	vsub.f32	s9, s1, s16
 80016e4:	ee76 5a47 	vsub.f32	s11, s12, s14
 80016e8:	ee38 5ac4 	vsub.f32	s10, s17, s8
 80016ec:	ee36 7a07 	vadd.f32	s14, s12, s14
 80016f0:	ee37 6aa6 	vadd.f32	s12, s15, s13
 80016f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80016f8:	ee24 ba82 	vmul.f32	s22, s9, s4
 80016fc:	ee65 aa22 	vmul.f32	s21, s10, s5
 8001700:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8001704:	ee25 aa81 	vmul.f32	s20, s11, s2
 8001708:	ee66 9a21 	vmul.f32	s19, s12, s3
 800170c:	ee27 9a03 	vmul.f32	s18, s14, s6
 8001710:	ee67 6aa3 	vmul.f32	s13, s15, s7
 8001714:	ee25 5a02 	vmul.f32	s10, s10, s4
 8001718:	ee65 5aa1 	vmul.f32	s11, s11, s3
 800171c:	ee26 6a01 	vmul.f32	s12, s12, s2
 8001720:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001724:	ee67 7a83 	vmul.f32	s15, s15, s6
 8001728:	ee70 0a88 	vadd.f32	s1, s1, s16
 800172c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8001730:	ee38 4a84 	vadd.f32	s8, s17, s8
 8001734:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 8001738:	ee7a 4a69 	vsub.f32	s9, s20, s19
 800173c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8001740:	ee79 6a66 	vsub.f32	s13, s18, s13
 8001744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001748:	445d      	add	r5, fp
 800174a:	45aa      	cmp	sl, r5
 800174c:	ed44 0a01 	vstr	s1, [r4, #-4]
 8001750:	ed80 4a01 	vstr	s8, [r0, #4]
 8001754:	4464      	add	r4, ip
 8001756:	ed83 8a00 	vstr	s16, [r3]
 800175a:	ed83 5a01 	vstr	s10, [r3, #4]
 800175e:	4460      	add	r0, ip
 8001760:	edc1 4a00 	vstr	s9, [r1]
 8001764:	ed81 6a01 	vstr	s12, [r1, #4]
 8001768:	4463      	add	r3, ip
 800176a:	edc2 6a00 	vstr	s13, [r2]
 800176e:	edc2 7a01 	vstr	s15, [r2, #4]
 8001772:	4461      	add	r1, ip
 8001774:	4462      	add	r2, ip
 8001776:	d893      	bhi.n	80016a0 <arm_radix4_butterfly_inverse_f32+0x1e0>
 8001778:	9a01      	ldr	r2, [sp, #4]
 800177a:	9b00      	ldr	r3, [sp, #0]
 800177c:	4417      	add	r7, r2
 800177e:	9a02      	ldr	r2, [sp, #8]
 8001780:	4496      	add	lr, r2
 8001782:	9a03      	ldr	r2, [sp, #12]
 8001784:	4490      	add	r8, r2
 8001786:	9a05      	ldr	r2, [sp, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	4293      	cmp	r3, r2
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f106 0608 	add.w	r6, r6, #8
 8001792:	f109 0908 	add.w	r9, r9, #8
 8001796:	f67f af6f 	bls.w	8001678 <arm_radix4_butterfly_inverse_f32+0x1b8>
 800179a:	9b06      	ldr	r3, [sp, #24]
 800179c:	9a07      	ldr	r2, [sp, #28]
 800179e:	f8dd b020 	ldr.w	fp, [sp, #32]
 80017a2:	0892      	lsrs	r2, r2, #2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	2a04      	cmp	r2, #4
 80017aa:	9207      	str	r2, [sp, #28]
 80017ac:	9306      	str	r3, [sp, #24]
 80017ae:	d902      	bls.n	80017b6 <arm_radix4_butterfly_inverse_f32+0x2f6>
 80017b0:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 80017b4:	e747      	b.n	8001646 <arm_radix4_butterfly_inverse_f32+0x186>
 80017b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80017ba:	3320      	adds	r3, #32
 80017bc:	ed53 4a04 	vldr	s9, [r3, #-16]
 80017c0:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 80017c4:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 80017c8:	ed53 5a01 	vldr	s11, [r3, #-4]
 80017cc:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 80017d0:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 80017d4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80017d8:	ed13 7a03 	vldr	s14, [r3, #-12]
 80017dc:	ee34 3a24 	vadd.f32	s6, s8, s9
 80017e0:	ee76 3a27 	vadd.f32	s7, s12, s15
 80017e4:	ee34 4a64 	vsub.f32	s8, s8, s9
 80017e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017ec:	ee75 4a65 	vsub.f32	s9, s10, s11
 80017f0:	ee35 6a25 	vadd.f32	s12, s10, s11
 80017f4:	ee76 5a87 	vadd.f32	s11, s13, s14
 80017f8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80017fc:	ee73 2a23 	vadd.f32	s5, s6, s7
 8001800:	ee74 6a24 	vadd.f32	s13, s8, s9
 8001804:	ee37 5a27 	vadd.f32	s10, s14, s15
 8001808:	ee73 3a63 	vsub.f32	s7, s6, s7
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	ee34 3a64 	vsub.f32	s6, s8, s9
 8001814:	ee75 4a86 	vadd.f32	s9, s11, s12
 8001818:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800181c:	ee62 2a80 	vmul.f32	s5, s5, s0
 8001820:	ee26 7a00 	vmul.f32	s14, s12, s0
 8001824:	ee63 5a80 	vmul.f32	s11, s7, s0
 8001828:	ee23 4a00 	vmul.f32	s8, s6, s0
 800182c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8001830:	ee64 4a80 	vmul.f32	s9, s9, s0
 8001834:	ee25 6a00 	vmul.f32	s12, s10, s0
 8001838:	ee67 7a80 	vmul.f32	s15, s15, s0
 800183c:	3a01      	subs	r2, #1
 800183e:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 8001842:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
 8001846:	ed03 4a04 	vstr	s8, [r3, #-16]
 800184a:	ed43 6a02 	vstr	s13, [r3, #-8]
 800184e:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8001852:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8001856:	ed03 6a03 	vstr	s12, [r3, #-12]
 800185a:	ed43 7a01 	vstr	s15, [r3, #-4]
 800185e:	f103 0320 	add.w	r3, r3, #32
 8001862:	d1ab      	bne.n	80017bc <arm_radix4_butterfly_inverse_f32+0x2fc>
 8001864:	b00d      	add	sp, #52	; 0x34
 8001866:	ecbd 8b08 	vpop	{d8-d11}
 800186a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800186e:	bf00      	nop

08001870 <arm_cfft_radix4_f32>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	7883      	ldrb	r3, [r0, #2]
 8001874:	4604      	mov	r4, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	460d      	mov	r5, r1
 800187a:	4608      	mov	r0, r1
 800187c:	6862      	ldr	r2, [r4, #4]
 800187e:	8821      	ldrh	r1, [r4, #0]
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	d005      	beq.n	8001890 <arm_cfft_radix4_f32+0x20>
 8001884:	f7ff fc52 	bl	800112c <arm_radix4_butterfly_f32>
 8001888:	78e3      	ldrb	r3, [r4, #3]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d007      	beq.n	800189e <arm_cfft_radix4_f32+0x2e>
 800188e:	bd70      	pop	{r4, r5, r6, pc}
 8001890:	ed94 0a04 	vldr	s0, [r4, #16]
 8001894:	f7ff fe14 	bl	80014c0 <arm_radix4_butterfly_inverse_f32>
 8001898:	78e3      	ldrb	r3, [r4, #3]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d1f7      	bne.n	800188e <arm_cfft_radix4_f32+0x1e>
 800189e:	4628      	mov	r0, r5
 80018a0:	8821      	ldrh	r1, [r4, #0]
 80018a2:	89e2      	ldrh	r2, [r4, #14]
 80018a4:	68a3      	ldr	r3, [r4, #8]
 80018a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80018aa:	f000 b8e9 	b.w	8001a80 <arm_bitreversal_f32>
 80018ae:	bf00      	nop

080018b0 <arm_cmplx_mag_f32>:
 80018b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80018b8:	b084      	sub	sp, #16
 80018ba:	d07f      	beq.n	80019bc <arm_cmplx_mag_f32+0x10c>
 80018bc:	2700      	movs	r7, #0
 80018be:	f100 0420 	add.w	r4, r0, #32
 80018c2:	f101 0510 	add.w	r5, r1, #16
 80018c6:	4646      	mov	r6, r8
 80018c8:	e05a      	b.n	8001980 <arm_cmplx_mag_f32+0xd0>
 80018ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80018ce:	eeb4 0a40 	vcmp.f32	s0, s0
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	f040 80a4 	bne.w	8001a22 <arm_cmplx_mag_f32+0x172>
 80018da:	ed05 0a04 	vstr	s0, [r5, #-16]
 80018de:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80018e2:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80018e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 80018ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80018f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	f2c0 808f 	blt.w	8001a1c <arm_cmplx_mag_f32+0x16c>
 80018fe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8001902:	eeb4 0a40 	vcmp.f32	s0, s0
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	f040 80af 	bne.w	8001a6c <arm_cmplx_mag_f32+0x1bc>
 800190e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8001912:	ed54 7a04 	vldr	s15, [r4, #-16]
 8001916:	ed14 0a03 	vldr	s0, [r4, #-12]
 800191a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800191e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001922:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	db72      	blt.n	8001a16 <arm_cmplx_mag_f32+0x166>
 8001930:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8001934:	eeb4 0a40 	vcmp.f32	s0, s0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	f040 808c 	bne.w	8001a58 <arm_cmplx_mag_f32+0x1a8>
 8001940:	ed05 0a02 	vstr	s0, [r5, #-8]
 8001944:	ed54 7a02 	vldr	s15, [r4, #-8]
 8001948:	ed14 0a01 	vldr	s0, [r4, #-4]
 800194c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001950:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001954:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	db20      	blt.n	80019a4 <arm_cmplx_mag_f32+0xf4>
 8001962:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8001966:	eeb4 0a40 	vcmp.f32	s0, s0
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	d169      	bne.n	8001a44 <arm_cmplx_mag_f32+0x194>
 8001970:	3e01      	subs	r6, #1
 8001972:	ed05 0a01 	vstr	s0, [r5, #-4]
 8001976:	f104 0420 	add.w	r4, r4, #32
 800197a:	f105 0510 	add.w	r5, r5, #16
 800197e:	d019      	beq.n	80019b4 <arm_cmplx_mag_f32+0x104>
 8001980:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8001984:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8001988:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800198c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001990:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	da95      	bge.n	80018ca <arm_cmplx_mag_f32+0x1a>
 800199e:	f845 7c10 	str.w	r7, [r5, #-16]
 80019a2:	e79c      	b.n	80018de <arm_cmplx_mag_f32+0x2e>
 80019a4:	3e01      	subs	r6, #1
 80019a6:	f845 7c04 	str.w	r7, [r5, #-4]
 80019aa:	f104 0420 	add.w	r4, r4, #32
 80019ae:	f105 0510 	add.w	r5, r5, #16
 80019b2:	d1e5      	bne.n	8001980 <arm_cmplx_mag_f32+0xd0>
 80019b4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80019b8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80019bc:	f012 0503 	ands.w	r5, r2, #3
 80019c0:	d026      	beq.n	8001a10 <arm_cmplx_mag_f32+0x160>
 80019c2:	2600      	movs	r6, #0
 80019c4:	f100 0408 	add.w	r4, r0, #8
 80019c8:	e00c      	b.n	80019e4 <arm_cmplx_mag_f32+0x134>
 80019ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80019ce:	eeb4 0a40 	vcmp.f32	s0, s0
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	d12e      	bne.n	8001a36 <arm_cmplx_mag_f32+0x186>
 80019d8:	3d01      	subs	r5, #1
 80019da:	ed01 0a01 	vstr	s0, [r1, #-4]
 80019de:	f104 0408 	add.w	r4, r4, #8
 80019e2:	d015      	beq.n	8001a10 <arm_cmplx_mag_f32+0x160>
 80019e4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80019e8:	ed14 0a01 	vldr	s0, [r4, #-4]
 80019ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80019f4:	3104      	adds	r1, #4
 80019f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80019fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	dae2      	bge.n	80019ca <arm_cmplx_mag_f32+0x11a>
 8001a04:	3d01      	subs	r5, #1
 8001a06:	f841 6c04 	str.w	r6, [r1, #-4]
 8001a0a:	f104 0408 	add.w	r4, r4, #8
 8001a0e:	d1e9      	bne.n	80019e4 <arm_cmplx_mag_f32+0x134>
 8001a10:	b004      	add	sp, #16
 8001a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a16:	f845 7c08 	str.w	r7, [r5, #-8]
 8001a1a:	e793      	b.n	8001944 <arm_cmplx_mag_f32+0x94>
 8001a1c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8001a20:	e777      	b.n	8001912 <arm_cmplx_mag_f32+0x62>
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	9203      	str	r2, [sp, #12]
 8001a28:	9102      	str	r1, [sp, #8]
 8001a2a:	9001      	str	r0, [sp, #4]
 8001a2c:	f000 f8c2 	bl	8001bb4 <sqrtf>
 8001a30:	a801      	add	r0, sp, #4
 8001a32:	c807      	ldmia	r0, {r0, r1, r2}
 8001a34:	e751      	b.n	80018da <arm_cmplx_mag_f32+0x2a>
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	9101      	str	r1, [sp, #4]
 8001a3c:	f000 f8ba 	bl	8001bb4 <sqrtf>
 8001a40:	9901      	ldr	r1, [sp, #4]
 8001a42:	e7c9      	b.n	80019d8 <arm_cmplx_mag_f32+0x128>
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	9203      	str	r2, [sp, #12]
 8001a4a:	9102      	str	r1, [sp, #8]
 8001a4c:	9001      	str	r0, [sp, #4]
 8001a4e:	f000 f8b1 	bl	8001bb4 <sqrtf>
 8001a52:	a801      	add	r0, sp, #4
 8001a54:	c807      	ldmia	r0, {r0, r1, r2}
 8001a56:	e78b      	b.n	8001970 <arm_cmplx_mag_f32+0xc0>
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	9203      	str	r2, [sp, #12]
 8001a5e:	9102      	str	r1, [sp, #8]
 8001a60:	9001      	str	r0, [sp, #4]
 8001a62:	f000 f8a7 	bl	8001bb4 <sqrtf>
 8001a66:	a801      	add	r0, sp, #4
 8001a68:	c807      	ldmia	r0, {r0, r1, r2}
 8001a6a:	e769      	b.n	8001940 <arm_cmplx_mag_f32+0x90>
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	9203      	str	r2, [sp, #12]
 8001a72:	9102      	str	r1, [sp, #8]
 8001a74:	9001      	str	r0, [sp, #4]
 8001a76:	f000 f89d 	bl	8001bb4 <sqrtf>
 8001a7a:	a801      	add	r0, sp, #4
 8001a7c:	c807      	ldmia	r0, {r0, r1, r2}
 8001a7e:	e746      	b.n	800190e <arm_cmplx_mag_f32+0x5e>

08001a80 <arm_bitreversal_f32>:
 8001a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a84:	b085      	sub	sp, #20
 8001a86:	0849      	lsrs	r1, r1, #1
 8001a88:	0052      	lsls	r2, r2, #1
 8001a8a:	2400      	movs	r4, #0
 8001a8c:	9203      	str	r2, [sp, #12]
 8001a8e:	1e8a      	subs	r2, r1, #2
 8001a90:	9101      	str	r1, [sp, #4]
 8001a92:	f101 0c01 	add.w	ip, r1, #1
 8001a96:	9202      	str	r2, [sp, #8]
 8001a98:	4621      	mov	r1, r4
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	9d01      	ldr	r5, [sp, #4]
 8001a9e:	3101      	adds	r1, #1
 8001aa0:	442a      	add	r2, r5
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	00d2      	lsls	r2, r2, #3
 8001aa6:	1846      	adds	r6, r0, r1
 8001aa8:	1885      	adds	r5, r0, r2
 8001aaa:	3104      	adds	r1, #4
 8001aac:	3204      	adds	r2, #4
 8001aae:	6837      	ldr	r7, [r6, #0]
 8001ab0:	f8d5 e000 	ldr.w	lr, [r5]
 8001ab4:	f8c6 e000 	str.w	lr, [r6]
 8001ab8:	4401      	add	r1, r0
 8001aba:	4402      	add	r2, r0
 8001abc:	602f      	str	r7, [r5, #0]
 8001abe:	3402      	adds	r4, #2
 8001ac0:	680e      	ldr	r6, [r1, #0]
 8001ac2:	f8d2 9000 	ldr.w	r9, [r2]
 8001ac6:	f8c1 9000 	str.w	r9, [r1]
 8001aca:	b2a4      	uxth	r4, r4
 8001acc:	6016      	str	r6, [r2, #0]
 8001ace:	eb04 050c 	add.w	r5, r4, ip
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	00ed      	lsls	r5, r5, #3
 8001ad6:	eb00 0e05 	add.w	lr, r0, r5
 8001ada:	3504      	adds	r5, #4
 8001adc:	9500      	str	r5, [sp, #0]
 8001ade:	eb0c 0102 	add.w	r1, ip, r2
 8001ae2:	9d02      	ldr	r5, [sp, #8]
 8001ae4:	00c9      	lsls	r1, r1, #3
 8001ae6:	00e7      	lsls	r7, r4, #3
 8001ae8:	00d6      	lsls	r6, r2, #3
 8001aea:	f101 0b04 	add.w	fp, r1, #4
 8001aee:	eb00 0901 	add.w	r9, r0, r1
 8001af2:	42ac      	cmp	r4, r5
 8001af4:	9903      	ldr	r1, [sp, #12]
 8001af6:	9d00      	ldr	r5, [sp, #0]
 8001af8:	eb00 0807 	add.w	r8, r0, r7
 8001afc:	eb00 0a06 	add.w	sl, r0, r6
 8001b00:	f107 0704 	add.w	r7, r7, #4
 8001b04:	f106 0604 	add.w	r6, r6, #4
 8001b08:	440b      	add	r3, r1
 8001b0a:	4407      	add	r7, r0
 8001b0c:	4406      	add	r6, r0
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4405      	add	r5, r0
 8001b12:	4483      	add	fp, r0
 8001b14:	d820      	bhi.n	8001b58 <arm_bitreversal_f32+0xd8>
 8001b16:	42a2      	cmp	r2, r4
 8001b18:	d9c0      	bls.n	8001a9c <arm_bitreversal_f32+0x1c>
 8001b1a:	edd8 7a00 	vldr	s15, [r8]
 8001b1e:	ed9a 7a00 	vldr	s14, [sl]
 8001b22:	ed88 7a00 	vstr	s14, [r8]
 8001b26:	edca 7a00 	vstr	s15, [sl]
 8001b2a:	f8d7 8000 	ldr.w	r8, [r7]
 8001b2e:	f8d6 a000 	ldr.w	sl, [r6]
 8001b32:	f8c7 a000 	str.w	sl, [r7]
 8001b36:	f8c6 8000 	str.w	r8, [r6]
 8001b3a:	f8de 6000 	ldr.w	r6, [lr]
 8001b3e:	f8d9 7000 	ldr.w	r7, [r9]
 8001b42:	f8ce 7000 	str.w	r7, [lr]
 8001b46:	f8c9 6000 	str.w	r6, [r9]
 8001b4a:	682e      	ldr	r6, [r5, #0]
 8001b4c:	f8db 7000 	ldr.w	r7, [fp]
 8001b50:	602f      	str	r7, [r5, #0]
 8001b52:	f8cb 6000 	str.w	r6, [fp]
 8001b56:	e7a1      	b.n	8001a9c <arm_bitreversal_f32+0x1c>
 8001b58:	b005      	add	sp, #20
 8001b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b5e:	bf00      	nop

08001b60 <__errno>:
 8001b60:	4b01      	ldr	r3, [pc, #4]	; (8001b68 <__errno+0x8>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000000c 	.word	0x2000000c

08001b6c <__libc_init_array>:
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	4e0d      	ldr	r6, [pc, #52]	; (8001ba4 <__libc_init_array+0x38>)
 8001b70:	4c0d      	ldr	r4, [pc, #52]	; (8001ba8 <__libc_init_array+0x3c>)
 8001b72:	1ba4      	subs	r4, r4, r6
 8001b74:	10a4      	asrs	r4, r4, #2
 8001b76:	2500      	movs	r5, #0
 8001b78:	42a5      	cmp	r5, r4
 8001b7a:	d109      	bne.n	8001b90 <__libc_init_array+0x24>
 8001b7c:	4e0b      	ldr	r6, [pc, #44]	; (8001bac <__libc_init_array+0x40>)
 8001b7e:	4c0c      	ldr	r4, [pc, #48]	; (8001bb0 <__libc_init_array+0x44>)
 8001b80:	f000 f86e 	bl	8001c60 <_init>
 8001b84:	1ba4      	subs	r4, r4, r6
 8001b86:	10a4      	asrs	r4, r4, #2
 8001b88:	2500      	movs	r5, #0
 8001b8a:	42a5      	cmp	r5, r4
 8001b8c:	d105      	bne.n	8001b9a <__libc_init_array+0x2e>
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b94:	4798      	blx	r3
 8001b96:	3501      	adds	r5, #1
 8001b98:	e7ee      	b.n	8001b78 <__libc_init_array+0xc>
 8001b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b9e:	4798      	blx	r3
 8001ba0:	3501      	adds	r5, #1
 8001ba2:	e7f2      	b.n	8001b8a <__libc_init_array+0x1e>
 8001ba4:	0800a480 	.word	0x0800a480
 8001ba8:	0800a480 	.word	0x0800a480
 8001bac:	0800a480 	.word	0x0800a480
 8001bb0:	0800a484 	.word	0x0800a484

08001bb4 <sqrtf>:
 8001bb4:	b510      	push	{r4, lr}
 8001bb6:	ed2d 8b02 	vpush	{d8}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	eeb0 8a40 	vmov.f32	s16, s0
 8001bc0:	f000 f848 	bl	8001c54 <__ieee754_sqrtf>
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <sqrtf+0x98>)
 8001bc6:	f993 4000 	ldrsb.w	r4, [r3]
 8001bca:	1c63      	adds	r3, r4, #1
 8001bcc:	d02c      	beq.n	8001c28 <sqrtf+0x74>
 8001bce:	eeb4 8a48 	vcmp.f32	s16, s16
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d627      	bvs.n	8001c28 <sqrtf+0x74>
 8001bd8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d522      	bpl.n	8001c28 <sqrtf+0x74>
 8001be2:	2301      	movs	r3, #1
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <sqrtf+0x9c>)
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	ee18 0a10 	vmov	r0, s16
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9308      	str	r3, [sp, #32]
 8001bf2:	f7fe fc6d 	bl	80004d0 <__aeabi_f2d>
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c00:	2300      	movs	r3, #0
 8001c02:	b9ac      	cbnz	r4, 8001c30 <sqrtf+0x7c>
 8001c04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c08:	4668      	mov	r0, sp
 8001c0a:	f000 f826 	bl	8001c5a <matherr>
 8001c0e:	b1b8      	cbz	r0, 8001c40 <sqrtf+0x8c>
 8001c10:	9b08      	ldr	r3, [sp, #32]
 8001c12:	b11b      	cbz	r3, 8001c1c <sqrtf+0x68>
 8001c14:	f7ff ffa4 	bl	8001b60 <__errno>
 8001c18:	9b08      	ldr	r3, [sp, #32]
 8001c1a:	6003      	str	r3, [r0, #0]
 8001c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001c20:	f7fe fee0 	bl	80009e4 <__aeabi_d2f>
 8001c24:	ee00 0a10 	vmov	s0, r0
 8001c28:	b00a      	add	sp, #40	; 0x28
 8001c2a:	ecbd 8b02 	vpop	{d8}
 8001c2e:	bd10      	pop	{r4, pc}
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe fdce 	bl	80007d4 <__aeabi_ddiv>
 8001c38:	2c02      	cmp	r4, #2
 8001c3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001c3e:	d1e3      	bne.n	8001c08 <sqrtf+0x54>
 8001c40:	f7ff ff8e 	bl	8001b60 <__errno>
 8001c44:	2321      	movs	r3, #33	; 0x21
 8001c46:	6003      	str	r3, [r0, #0]
 8001c48:	e7e2      	b.n	8001c10 <sqrtf+0x5c>
 8001c4a:	bf00      	nop
 8001c4c:	20000070 	.word	0x20000070
 8001c50:	0800a478 	.word	0x0800a478

08001c54 <__ieee754_sqrtf>:
 8001c54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8001c58:	4770      	bx	lr

08001c5a <matherr>:
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	4770      	bx	lr
	...

08001c60 <_init>:
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c62:	bf00      	nop
 8001c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c66:	bc08      	pop	{r3}
 8001c68:	469e      	mov	lr, r3
 8001c6a:	4770      	bx	lr

08001c6c <_fini>:
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	bf00      	nop
 8001c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c72:	bc08      	pop	{r3}
 8001c74:	469e      	mov	lr, r3
 8001c76:	4770      	bx	lr
